# ==========================================
# PostgreSQL StatefulSet con 3 r√©plicas
# 1 Primario (escritura) y 2 R√©plicas (lectura)
# Archivo √∫nico: oc.yaml
# ==========================================

# üîí Secret con contrase√±as
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
type: Opaque
stringData:
  password: "supersecurepassword"
  replication_password: "replicapassword"
---
# ‚öôÔ∏è ConfigMap con scripts de inicializaci√≥n
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
data:
  primary.sh: |
    #!/bin/bash
    set -e
    echo "Inicializando nodo primario..."
    if [ ! -s "$PGDATA/PG_VERSION" ]; then
      initdb -D "$PGDATA"
      echo "host replication all 0.0.0.0/0 md5" >> "$PGDATA/pg_hba.conf"
      echo "listen_addresses='*'" >> "$PGDATA/postgresql.conf"
      pg_ctl -D "$PGDATA" -o "-c listen_addresses='*'" -w start
      psql --username "$POSTGRES_USER" -c "CREATE ROLE replicator WITH REPLICATION PASSWORD '$REPLICATION_PASSWORD' LOGIN;"
      pg_ctl -D "$PGDATA" -m fast -w stop
    fi
    exec postgres

  replica.sh: |
    #!/bin/bash
    set -e
    echo "Inicializando r√©plica..."
    if [ ! -s "$PGDATA/PG_VERSION" ]; then
      rm -rf "$PGDATA"/*
      pg_basebackup -h postgres-0.postgres -D "$PGDATA" -U replicator -Fp -Xs -P -R
    fi
    echo "listen_addresses='*'" >> "$PGDATA/postgresql.conf"
    exec postgres
---
# üß± Headless Service (descubrimiento interno)
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  ports:
  - port: 5432
    name: postgres
  clusterIP: None
  selector:
    app: postgres
---
# üåê Servicios de acceso (lector y escritor)
apiVersion: v1
kind: Service
metadata:
  name: postgres-primary
spec:
  ports:
  - port: 5432
  selector:
    app: postgres
    role: primary
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-replicas
spec:
  ports:
  - port: 5432
  selector:
    app: postgres
    role: replica
---
# üß© StatefulSet con 3 pods
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
spec:
  serviceName: "postgres"
  replicas: 3
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: replication_password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
        - name: config
          mountPath: /scripts
        command:
          - /bin/bash
          - -c
          - |
            if [ "$(hostname)" = "postgres-0" ]; then
              cp /scripts/primary.sh /tmp/start.sh
              label="primary"
            else
              cp /scripts/replica.sh /tmp/start.sh
              label="replica"
            fi
            kubectl label pod $(hostname) app=postgres role=$label --overwrite || true
            chmod +x /tmp/start.sh
            /tmp/start.sh
      volumes:
      - name: config
        configMap:
          name: postgres-config
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 5Gi
