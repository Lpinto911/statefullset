## @section Global parameters
global:
  ## @param global.imageRegistry Global Docker Image registry
  imageRegistry: ""
  ## @param global.imagePullSecrets Global Docker registry secret names as an array
  imagePullSecrets: []

## @section Common parameters
## @param nameOverride String to partially override mongodb.fullname
nameOverride: ""
## @param fullnameOverride String to fully override mongodb.fullname
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
commonAnnotations: {}

## @param podAnnotations Annotations to add to the pod created by the statefulset
podAnnotations: {}
## @param podLabels Labels to add to the pod created by the statefulset
podLabels: {}

## @section MongoDB image parameters
image:
  ## @param image.registry MongoDB image registry
  registry: docker.io
  ## @param image.repository MongoDB image repository
  repository: mongo
  ## @param image.tag MongoDB image tag
  tag: "8.2.1@sha256:86835e8da0f94efd61334decb320fa43e8a60027688cbd856bf29d065b470338"
  ## @param image.pullPolicy MongoDB image pull policy
  pullPolicy: Always
  ## @param image.command Override default container command (useful when using custom images)
  command: []
  ## @param image.args Override default container args (useful when using custom images)
  args: []

## @param replicaCount Number of MongoDB replicas to deploy
replicaCount: 2

service:
  ## @param service.type Kubernetes service type
  type: ClusterIP
  ## @param service.port MongoDB service port
  port: 27017
  ## @param serivce.annotations Annotations to add to the mongodb service
  annotations: {}

auth:
  ## @param auth.enabled Enable MongoDB authentication
  enabled: true
  ## @param auth.rootUsername MongoDB root username
  rootUsername: admin
  ## @param auth.rootPassword MongoDB root password (if empty, random password will be generated)
  rootPassword: ""
  ## @param auth.existingSecret Name of existing secret containing MongoDB password
  existingSecret: ""
  ## @param auth.existingSecretPasswordKey Key in existing secret containing MongoDB password
  existingSecretPasswordKey: ""

## @section config MongoDB configuration options
config:
  ## @param config.mountPath MongoDB configuration options
  mountPath: /etc/mongo
  ## @param config.content Include your custom MongoDB configurations here as string
  content: |
    systemLog:
      quiet: true
      verbosity: 0
    net:
      bindIpAll: true
  ## param config.existingConfigmap Name of an existing Configmap to use instead of creating one
  existingConfigmap: ""
  ## param config.existingConfigmapKey Name of the key in the Configmap that should be used
  existingConfigmapKey: ""

## @section customUser Optional user to be created at initialisation with a custom password and database
customUser: {}
  ## @param customUser.name Name of the custom user to be created
  # name: ""
  ## @param customUser.database Name of the database to be created
  # database: ""
  ## @param customUser.password Password to be used for the custom user
  # password: ""
  ## @param customUser.existingSecret Existing secret, in which username, password and database name are saved
  # existingSecret: ""
  ## @param customUser.secretKeys Name of keys in existing secret to use the custom user name, password and database
  # secretKeys:
  #   name: ""
  #   password: ""
  #   database: ""

persistence:
  ## @param persistence.enabled Enable persistent storage
  enabled: true
  ## @param persistence.storageClass Storage class to use for persistent volume
  storageClass: ""
  ## @param persistence.accessMode Access mode for persistent volume
  accessMode: ReadWriteOnce
  ## @param persistence.size Size of persistent volume
  size: 8Gi
  ## @param persistence.mountPath Mount path for MongoDB data
  mountPath: /data/db
  ## @param persistence.annotations Annotations for persistent volume claims
  annotations: {}

## @param resources Resource limits and requests for MongoDB pod
resources:
  limits:
    memory: 512Mi
  requests:
    cpu: 50m
    memory: 512Mi

## @param nodeSelector Node selector for pod assignment
nodeSelector: {}

## @param tolerations Tolerations for pod assignment
tolerations: []

## @param affinity Affinity rules for pod assignment
affinity: {}

containerSecurityContext:
  ## @param securityContext.runAsUser User ID to run the container
  runAsUser: 999
  ## @param securityContext.runAsNonRoot Run as non-root user
  runAsNonRoot: true
  ## @param containerSecurityContext.allowPrivilegeEscalation Set MongoDB container's privilege escalation
  allowPrivilegeEscalation: false

## @param podSecurityContext Security context for the pod
podSecurityContext:
  ## @param podSecurityContext.fsGroup Set MongoDB pod's Security Context fsGroup
  fsGroup: 999

livenessProbe:
  ## @param livenessProbe.enabled Enable liveness probe
  enabled: true
  ## @param livenessProbe.initialDelaySeconds Initial delay before starting probes
  initialDelaySeconds: 30
  ## @param livenessProbe.periodSeconds How often to perform the probe
  periodSeconds: 10
  ## @param livenessProbe.timeoutSeconds Timeout for each probe attempt
  timeoutSeconds: 5
  ## @param livenessProbe.failureThreshold Number of failures before pod is restarted
  failureThreshold: 6
  ## @param livenessProbe.successThreshold Number of successes to mark probe as successful
  successThreshold: 1

readinessProbe:
  ## @param readinessProbe.enabled Enable readiness probe
  enabled: true
  ## @param readinessProbe.initialDelaySeconds Initial delay before starting probes
  initialDelaySeconds: 5
  ## @param readinessProbe.periodSeconds How often to perform the probe
  periodSeconds: 10
  ## @param readinessProbe.timeoutSeconds Timeout for each probe attempt
  timeoutSeconds: 5
  ## @param readinessProbe.failureThreshold Number of failures before pod is marked unready
  failureThreshold: 6
  ## @param readinessProbe.successThreshold Number of successes to mark probe as successful
  successThreshold: 1

## @param extraEnvVars Additional environment variables to set
extraEnvVars: []
  # - name: CUSTOM_VAR
  #   value: "custom-value"
  # - name: SECRET_VAR
  #   valueFrom:
  #     secretKeyRef:
  #       name: my-secret
  #       key: secret-key

## @param extraVolumes Additional volumes to add to the pod
extraVolumes: []

## @param extraVolumeMounts Additional volume mounts to add to the MongoDB container
extraVolumeMounts: []

## @param extraObjects Array of extra objects to deploy with the release
extraObjects: []

## @section Network Policy parameters
networkPolicy:
  ## @param networkPolicy.enabled Enable NetworkPolicy for MongoDB and metrics
  enabled: false
  ## @param networkPolicy.allowedSources List of allowed sources for network policy
  allowedSources: []
  #  - namespaceSelector:
  #      matchLabels:
  #        monitoring: enabled
  #  - podSelector:
  #      matchLabels:
  #        app: prometheus

## @section Metrics parameters
metrics:
  ## @param metrics.enabled Enable metrics collection
  enabled: false
  ## @param metrics.username Username for metrics collection (defaults to root username if not specified)
  username: ""
  ## @param metrics.image.registry MongoDB Exporter image registry
  ## @param metrics.image.repository MongoDB Exporter image repository
  ## @param metrics.image.tag MongoDB Exporter image tag
  ## @param metrics.image.pullPolicy MongoDB Exporter image pull policy
  image:
    registry: docker.io
    repository: percona/mongodb_exporter
    tag: "0.47.1"
    pullPolicy: IfNotPresent
  ## @param metrics.resources Resource limits and requests for metrics container
  resources:
    limits:
      memory: 256Mi
    requests:
      cpu: 10m
      memory: 64Mi
  ## @param metrics.containerSecurityContext Security context for metrics container
  containerSecurityContext:
    runAsUser: 65534
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
  ## @section Metrics service parameters
  service:
    ## @param metrics.service.type Metrics service type
    type: ClusterIP
    ## @param metrics.service.port Metrics service port
    port: 9216
    ## @param metrics.service.targetPort Metrics service target port
    targetPort: http-metrics
    ## @param metrics.service.annotations Additional annotations for metrics service
    annotations: {}
    ## @param metrics.service.labels Additional labels for metrics service
    labels: {}
  ## @section ServiceMonitor parameters
  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled Create ServiceMonitor resource for scraping metrics using PrometheusOperator
    enabled: false
    ## @param metrics.serviceMonitor.namespace Namespace in which ServiceMonitor is created
    namespace: ""
    ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped
    interval: 30s
    ## @param metrics.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended
    scrapeTimeout: ""
    ## @param metrics.serviceMonitor.additionalLabels Additional labels for ServiceMonitor
    additionalLabels: {}
    ## @param metrics.serviceMonitor.annotations Additional annotations for ServiceMonitor
    annotations: {}
    ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping
    relabelings: []
    ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before ingestion
    metricRelabelings: []
    ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
    honorLabels: false
    ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus
    jobLabel: ""
  ## @param metrics.livenessProbe.enabled Enable liveness probe for metrics container
  ## @param metrics.livenessProbe.initialDelaySeconds Initial delay before starting liveness probes
  ## @param metrics.livenessProbe.periodSeconds How often to perform the liveness probe
  ## @param metrics.livenessProbe.timeoutSeconds Timeout for each liveness probe attempt
  ## @param metrics.livenessProbe.failureThreshold Number of failures before container is restarted
  ## @param metrics.livenessProbe.successThreshold Number of successes to mark liveness probe as successful
  livenessProbe:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  ## @param metrics.readinessProbe.enabled Enable readiness probe for metrics container
  ## @param metrics.readinessProbe.initialDelaySeconds Initial delay before starting readiness probes
  ## @param metrics.readinessProbe.periodSeconds How often to perform the readiness probe
  ## @param metrics.readinessProbe.timeoutSeconds Timeout for each readiness probe attempt
  ## @param metrics.readinessProbe.failureThreshold Number of failures before container is marked unready
  ## @param metrics.readinessProbe.successThreshold Number of successes to mark readiness probe as successful
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  ## @param metrics.extraEnvVars Additional environment variables for metrics container
  extraEnvVars: []
  # - name: CUSTOM_VAR
  #   value: "custom-value"
  # - name: SECRET_VAR
  #   valueFrom:
  #     secretKeyRef:
  #       name: my-secret
  #       key: secret-key
  ## @param metrics.extraArgs Additional command line arguments for MongoDB Exporter
  extraArgs: []

